.include "beta.uasm"

        BR(STEP1)   // start execution with Step 1

        // the array to be sorted
        A:      LONG(10) LONG(56) LONG(27) LONG(69) LONG(73) LONG(99)
                LONG(44) LONG(36) LONG(10) LONG(72) LONG(71) LONG(1)

ALEN = (. - A)/4    // determine number of elements in A

// Please enter your code for each the steps below...

	i = R0        // use R0 to hold the value of i
	swapped = R1  // use R1 to hold the value of swapped

STEP1:
	CMOVE(0,R1)			// 0->R1
STEP2:
    CMOVE(0,R0)			// 0->R0
STEP3:
    ADDC(R0,1,R0)		// increment i
	SUBC(R0,ALEN,R5) 	// if i-len->R5
	BEQ(R5,STEP5)		// if R5=0 go to step5
STEP4:
	MULC(R0,4,R2) 		// i in R0, convert index into byte offset
						// load address is Reg[Ra] + sxt(16-bit) literal
	LD(R2,A,R3)   		// loads A[i]
	LD(R2,A-4,R4) 		// loads A[i-1]
	CMPLT(R3,R4,R6)		// if R4>R3 1->R6 else 0->R6
	BEQ(R6,STEP3)		// if r6=0 go to step3
	ST(R4,A,R2)   		// loads R4 to A[i]
	ST(R3,A-4,R2) 		// loads R3 to A[i-1]
	CMOVE(1,R1)			// 1->R1
	BR(STEP3)			// go to step3
STEP5:
    BNE(R1,STEP1)		// if R1!=0 GO TO STEP1


// When step 5 is complete, execution continues with the
// checkoff code.  You must include this code in order to
// receive credit for completing the problem.
.include "checkoff.uasm"

